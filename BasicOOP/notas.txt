En C# si la clase no tiene un constructor explícito, el compilador crea uno por defecto. 
Este constructor por defecto no toma parámetros y no realiza ninguna acción especial.
Si defines un constructor personalizado, el compilador no generará el constructor por defecto.

Los valores de tipo int n c# son inicializados a 0 por defecto si no se les asigna un valor explícito.

las propiedades de una clase en c# sino se declaran como publicas, son privadas por defdcto

en c# nombres de clases, properties y métodos deben comenzar con mayúscula,
mientras que los campos privados suelen comenzar con minúscula o con un guion bajo.

nameof(this.Height) la funcion nameof devuelve el nombre de la propiedad como una cadena de texto.

readonynly es un modificador que indica que una propiedad o campo no puede ser modificado después de su inicialización.
Pero permite modificar esos valores en el constructor de la clase.

variables de tipo const no pueden ser modificadas una vez que se les asigna un valor inicial. Y no se pueden declara como var.

diferencia entre campos const y readonly es que los campos const deben ser inicializados en el momento de su declaración y no pueden cambiar, mientras que los campos readonly 
pueden ser inicializados en el constructor de la clase y pueden depender de otros valores. Pero luego de ser inicializados, tampoco pueden ser modificados.

Al usar campos privados, se recomienda usar propiedades públicas para acceder a ellos, con get y set, para mantener el encapsulamiento y permitir un control más fino sobre cómo se accede y modifica el valor.

si la clase no tiene un constructor definido, se puede inicializar una instancia de clase 
usando objetos :

var person = new Person
{
    Name = "John Doe",
    YearOfBirth = 1990,
};

No es necesario setear todos, el compilador asignará los valores por defecto a las propiedades que no se hayan inicializado explícitamente.
inicializar con objetos funciona si el set proterty es público.

el property init permite establecer el valor de una propiedad solo durante la inicialización del objeto, una vez que el objeto ha sido creado, la propiedad no puede ser modificada.}

cuando usar metodos o clases estaticos:
// - Cuando no necesitas mantener un estado específico de una instancia.
// - Cuando la funcionalidad es independiente de cualquier instancia específica.
// - Cuando quieres agrupar funciones relacionadas que no dependen de los datos de instancia.
// - Cuando quieres mejorar la legibilidad del código al indicar que una función es utilitaria o de ayuda.
// - Cuando quieres evitar la creación de instancias innecesarias para funciones que no requieren estado.

usar metodos estaticos cuando el metodo no necesita acceder a datos de instancia y su funcionalidad es independiente de cualquier objeto específico.

las propiedades const son por default estáticas, lo que significa que pertenecen a la clase en lugar de a una instancia específica.

Sumamente importante:

Usa const solo con valores conocidos en compilación (ej: const int Max = 100;).

Usa readonly para valores que:

Necesitan inicialización en tiempo de ejecución.

No cambiarán después de ser asignados.

Incluyen propiedades estáticas como Environment.NewLine.

Al importar directivas globales no es necesario importarla en cada archivo, se importan una sola vez al inicio del proyecto.

global using System;

En POO los metodos privados no se heredan, son exclusivos de la clase donde se definen.
Metodos protected se heredan, pero no son accesibles fuera de la jerarquía de herencia. No puedo usarlos en instancias de la clase base, solo en clases derivadas.
Si un metodo o propiedad de una clase base tiene como modificador de acceso virtual, puede ser sobreescrito en las clases hijas
usando override en sus metodos o propiedades que sobreescribren 